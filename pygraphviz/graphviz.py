# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_graphviz', [dirname(__file__)])
        except ImportError:
            import _graphviz
            return _graphviz
        if fp is not None:
            try:
                _mod = imp.load_module('_graphviz', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _graphviz = swig_import_helper()
    del swig_import_helper
else:
    import _graphviz
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def agopen(name, kind, disc):
    return _graphviz.agopen(name, kind, disc)
agopen = _graphviz.agopen

def agraphnew(name,strict=False,directed=False):
    if strict:
       if directed:
            return _graphviz.agopen(name,cvar.Agstrictdirected,None)
       else:
            return _graphviz.agopen(name,cvar.Agstrictundirected,None)
    else:
        if directed:
            return _graphviz.agopen(name,cvar.Agdirected,None)
        else:
            return _graphviz.agopen(name,cvar.Agundirected,None)


def agclose(g):
    return _graphviz.agclose(g)
agclose = _graphviz.agclose

def agread(file, arg2):
    return _graphviz.agread(file, arg2)
agread = _graphviz.agread

def agwrite(g, file):
    return _graphviz.agwrite(g, file)
agwrite = _graphviz.agwrite

def agisundirected(g):
    return _graphviz.agisundirected(g)
agisundirected = _graphviz.agisundirected

def agisdirected(g):
    return _graphviz.agisdirected(g)
agisdirected = _graphviz.agisdirected

def agisstrict(g):
    return _graphviz.agisstrict(g)
agisstrict = _graphviz.agisstrict

def agnode(g, name, createflag):
    return _graphviz.agnode(g, name, createflag)
agnode = _graphviz.agnode

def agidnode(g, id, createflag):
    return _graphviz.agidnode(g, id, createflag)
agidnode = _graphviz.agidnode

def agsubnode(g, n, createflag):
    return _graphviz.agsubnode(g, n, createflag)
agsubnode = _graphviz.agsubnode

def agfstnode(g):
    return _graphviz.agfstnode(g)
agfstnode = _graphviz.agfstnode

def agnxtnode(g, n):
    return _graphviz.agnxtnode(g, n)
agnxtnode = _graphviz.agnxtnode

def aglstnode(g):
    return _graphviz.aglstnode(g)
aglstnode = _graphviz.aglstnode

def agprvnode(g, n):
    return _graphviz.agprvnode(g, n)
agprvnode = _graphviz.agprvnode

def agedge(g, t, h, name, createflag):
    return _graphviz.agedge(g, t, h, name, createflag)
agedge = _graphviz.agedge

def agidedge(g, t, h, id, createflag):
    return _graphviz.agidedge(g, t, h, id, createflag)
agidedge = _graphviz.agidedge

def agsubedge(g, e, createflag):
    return _graphviz.agsubedge(g, e, createflag)
agsubedge = _graphviz.agsubedge

def agfstin(g, n):
    return _graphviz.agfstin(g, n)
agfstin = _graphviz.agfstin

def agnxtin(g, e):
    return _graphviz.agnxtin(g, e)
agnxtin = _graphviz.agnxtin

def agfstout(g, n):
    return _graphviz.agfstout(g, n)
agfstout = _graphviz.agfstout

def agnxtout(g, e):
    return _graphviz.agnxtout(g, e)
agnxtout = _graphviz.agnxtout

def agfstedge(g, n):
    return _graphviz.agfstedge(g, n)
agfstedge = _graphviz.agfstedge

def agnxtedge(g, e, n):
    return _graphviz.agnxtedge(g, e, n)
agnxtedge = _graphviz.agnxtedge

def aghead(e):
    return _graphviz.aghead(e)
aghead = _graphviz.aghead

def agtail(e):
    return _graphviz.agtail(e)
agtail = _graphviz.agtail

def agattr(g, kind, name, value):
    return _graphviz.agattr(g, kind, name, value)
agattr = _graphviz.agattr

def agattrsym(obj, name):
    return _graphviz.agattrsym(obj, name)
agattrsym = _graphviz.agattrsym

def agnxtattr(g, kind, attr):
    return _graphviz.agnxtattr(g, kind, attr)
agnxtattr = _graphviz.agnxtattr

def agget(obj, name):
    return _graphviz.agget(obj, name)
agget = _graphviz.agget

def agxget(obj, sym):
    return _graphviz.agxget(obj, sym)
agxget = _graphviz.agxget

def agset(obj, name, value):
    return _graphviz.agset(obj, name, value)
agset = _graphviz.agset

def agxset(obj, sym, value):
    return _graphviz.agxset(obj, sym, value)
agxset = _graphviz.agxset

def agsafeset(obj, name, value, arg4):
    return _graphviz.agsafeset(obj, name, value, arg4)
agsafeset = _graphviz.agsafeset

def agattrname(atsym):
    return _graphviz.agattrname(atsym)
agattrname = _graphviz.agattrname

def agattrdefval(atsym):
    return _graphviz.agattrdefval(atsym)
agattrdefval = _graphviz.agattrdefval

def agsafeset_label(g, obj, name, val, arg5):
    return _graphviz.agsafeset_label(g, obj, name, val, arg5)
agsafeset_label = _graphviz.agsafeset_label

def agattr_label(g, kind, name, val):
    return _graphviz.agattr_label(g, kind, name, val)
agattr_label = _graphviz.agattr_label

def agsubg(g, name, createflag):
    return _graphviz.agsubg(g, name, createflag)
agsubg = _graphviz.agsubg

def agfstsubg(g):
    return _graphviz.agfstsubg(g)
agfstsubg = _graphviz.agfstsubg

def agnxtsubg(subg):
    return _graphviz.agnxtsubg(subg)
agnxtsubg = _graphviz.agnxtsubg

def agparent(g):
    return _graphviz.agparent(g)
agparent = _graphviz.agparent

def agroot(g):
    return _graphviz.agroot(g)
agroot = _graphviz.agroot

def agdelsubg(g, sub):
    return _graphviz.agdelsubg(g, sub)
agdelsubg = _graphviz.agdelsubg

def agnnodes(g):
    return _graphviz.agnnodes(g)
agnnodes = _graphviz.agnnodes

def agnedges(g):
    return _graphviz.agnedges(g)
agnedges = _graphviz.agnedges

def agdegree(g, n, arg3, out):
    return _graphviz.agdegree(g, n, arg3, out)
agdegree = _graphviz.agdegree

def agraphof(arg1):
    return _graphviz.agraphof(arg1)
agraphof = _graphviz.agraphof

def agnameof(arg1):
    return _graphviz.agnameof(arg1)
agnameof = _graphviz.agnameof

def agdelnode(g, arg_n):
    return _graphviz.agdelnode(g, arg_n)
agdelnode = _graphviz.agdelnode

def agdeledge(g, arg_e):
    return _graphviz.agdeledge(g, arg_e)
agdeledge = _graphviz.agdeledge

def agnameof(handle):
  name=_graphviz.agnameof(handle)
  if name is None:
     return None
  if name==b'' or name.startswith(b'%'):
    return None
  else:
    return name


_graphviz.AGRAPH_swigconstant(_graphviz)
AGRAPH = _graphviz.AGRAPH

_graphviz.AGNODE_swigconstant(_graphviz)
AGNODE = _graphviz.AGNODE

_graphviz.AGOUTEDGE_swigconstant(_graphviz)
AGOUTEDGE = _graphviz.AGOUTEDGE

_graphviz.AGINEDGE_swigconstant(_graphviz)
AGINEDGE = _graphviz.AGINEDGE

_graphviz.AGEDGE_swigconstant(_graphviz)
AGEDGE = _graphviz.AGEDGE
# This file is compatible with both classic and new-style classes.

cvar = _graphviz.cvar
Agdirected = cvar.Agdirected
Agstrictdirected = cvar.Agstrictdirected
Agundirected = cvar.Agundirected
Agstrictundirected = cvar.Agstrictundirected

